{"remainingRequest":"/Users/panbing/store/lang/doc/blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/panbing/store/lang/doc/blog/node_modules/vuepress-theme-api/components/CURL/index.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"/Users/panbing/store/lang/doc/blog/node_modules/vuepress-theme-api/components/CURL/index.vue","mtime":1620918715376},{"path":"/Users/panbing/store/lang/doc/blog/node_modules/css-loader/dist/cjs.js","mtime":1620915890300},{"path":"/Users/panbing/store/lang/doc/blog/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1620915890611},{"path":"/Users/panbing/store/lang/doc/blog/node_modules/postcss-loader/src/index.js","mtime":1620915890507},{"path":"/Users/panbing/store/lang/doc/blog/node_modules/stylus-loader/index.js","mtime":1620915889200},{"path":"/Users/panbing/store/lang/doc/blog/node_modules/cache-loader/dist/cjs.js","mtime":1620915890299},{"path":"/Users/panbing/store/lang/doc/blog/node_modules/vue-loader/lib/index.js","mtime":1620915890611}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jdXJsCiAgJl9fYm9keQogICAgb3V0bGluZTogbm9uZQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vuepress-theme-api/components/CURL","sourcesContent":["<template>\n  <div class=\"curl__container\">\n    <div ref=\"curl\" class=\"curl__body\" contenteditable>\n      <slot></slot>\n    </div>\n    <Button :light=\"lightBtn\" :loading=\"loading\" @click=\"sendRequest\"\n      >Send request now</Button\n    >\n    <NetworkPanel :visible.sync=\"networkPanelVisible\" v-bind=\"networkData\" />\n  </div>\n</template>\n\n<script>\nimport nprogress from 'nprogress'\n\nimport request from '../../helpers/request'\nimport curl from '../../helpers/curl'\nimport { isJSON, isQueryString } from '../../helpers/is'\n\n// configure progress bar\nnprogress.configure({\n  showSpinner: false,\n})\n\nexport default {\n  name: 'CURL',\n  data() {\n    return {\n      lightBtn: true,\n      loading: false,\n      networkPanelVisible: false,\n      networkData: {\n        method: '',\n        url: '',\n        headers: {},\n        request: {},\n        response: {},\n        stautsCode: '',\n        statusText: '',\n      },\n    }\n  },\n  mounted() {\n    if (this.notInExampleBox()) {\n      this.lightBtn = false\n    }\n  },\n  methods: {\n    openNetworkPanel() {\n      this.networkPanelVisible = true\n    },\n    sendRequest() {\n      const cmd = this.$refs.curl.outerText.trim()\n\n      if (this.loading) return\n\n      const options = curl(cmd)\n\n      if (!options) {\n        this.$message.error(\n          'Got an invalid CURL command, please check it and try again.'\n        )\n        return\n      }\n\n      console.clear()\n      console.log('====== DEBUG INFO BEGIN ======')\n      console.info(`=> ${options.method.toUpperCase()} ${options.url}`)\n\n      this.networkData.method = options.method.toUpperCase()\n      this.networkData.url = options.url\n\n      if (options.headers) {\n        console.info('=> Headers:', options.headers)\n\n        this.networkData.headers = options.headers\n      }\n\n      if (options.params) {\n        console.info('=> Params:', options.params)\n      }\n\n      if (options.data) {\n        console.info('=> Data:', options.data)\n\n        this.networkData.data = options.data\n      }\n\n      this.openLoading()\n\n      request(options)\n        .then((data) => {\n          this.closeLoading()\n\n          this.$message.success(\n            `${data.status} ${data.data.message || data.statusText}`\n          )\n\n          this.networkData.statusCode = `${data.status}`\n          this.networkData.statusText = data.statusText\n          this.networkData.response = data.data\n\n          console.info('<=', data.status, data.statusText)\n          console.info('<=', 'data:', data.data)\n        })\n        .catch((err) => {\n          this.closeLoading()\n\n          this.$message.error(`${err.status} ${err.message}`)\n\n          this.networkData.statusCode = `${err.status}`\n          this.networkData.statusText = err.message\n          this.networkData.response = err.data\n\n          console.error('<=', err)\n        })\n        .finally(() => {\n          console.log('====== DEBUG INFO END ======')\n\n          setTimeout(() => {\n            this.openNetworkPanel()\n          }, 300)\n        })\n    },\n    notInExampleBox() {\n      return this.$el.parentNode.getAttribute('type') !== 'example'\n    },\n    openLoading() {\n      this.loading = true\n\n      nprogress.start()\n    },\n    closeLoading() {\n      this.loading = false\n\n      nprogress.done()\n    },\n  },\n}\n</script>\n\n<style lang=\"stylus\">\n.curl\n  &__body\n    outline: none\n</style>\n"]}]}